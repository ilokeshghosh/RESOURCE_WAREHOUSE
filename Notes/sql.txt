surrogate key : The key which have no mapping in real world serial number
natural key: The key which have mapping in real world like adhaar number
What is composite key key?
A composite key in SQL can be defined as a combination of multiple columns, and these columns are used to identify all the rows that are involved uniquely.

*****Creating a table***

CREATE TABLE student(
	student_id int PRIMARY KEY,
	name VARCHAR(20),
	major VARCHAR(20)
);

****describing a table****
DESCRIBE student;

****Droping or deleting a table****
DROP 	TABLE student;

***Altering a table****
ALTER TABLE student ADD cgpa DECIMAL(2,2); 

ALTER TABLE student DROP COLUMN gpa;

*****Inserting data*******

INSERT INTO student VALUES(1,'Lokesh','computer science');
INSERT INTO student VALUES(2,'Jack','biotech');
INSERT INTO student(student_id,name) VALUES(3,'Mike');

****select a table****
SELECT * FROM student;

****Constraints****

CREATE TABLE student(
	student_id INT PRIMARY KEY ,
	name VARCHAR(20) NOT NULL,
	major VARCHAR(20) UNIQUE
);

INSERT INTO student VALUES(1,'Lokesh','computer science');
INSERT INTO student VALUES(2,NULL,'computer science'); //give a error
INSERT INTO student VALUES(3,'Jack','computer science'); //give a error

***Default values***
CREATE TABLE student(	
	student_id INT PRIMARY KEY,
	name VARCHAR(20),
	major VARCHAR(20) DEFAULT 'undecided'
);

INSERT INTO student(student_id,name) VALUES(1,'Mike');
INSERT INTO student(student_id,name) VALUES(2,'Jake');

**Auto increment**
CREATE TABLE  student(
	student_id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(20),
	major VARCHAR(20)
);
INSERT INTO student(name,major) VALUES('Lokesh','BCA');
INSERT INTO student(name,major) VALUES('Jake','CSE');
INSERT INTO student(name,major) VALUES('Mike','PolyMath');


SELECT * FROM student;



****Update and Delete****
 
 comparision ops:
 = :equals
 <> :not equals
 > :greater than
 < :less than
 >= :greater than or equal
 <= :less than or equal
 
 UPDATE student 
 SET major = 'bio'
 WHERE major ='BCA';
 
 
 UPDATE student SET name='Raj' WHERE student_id = 2;
 UPDATE student SET major='Phy'; //This will change  value major to 'Phy'
 
 **delete rows**
 
 DELETE FROM student 
 WHERE student_id =3;
 
 DELETE FROM student
 WHERE name='Tom' AND major ='undecided';
 
 
 ****Basic Queries****
 
 SELECT name,major FROM student;
 
 SELECT name,major FROM student ORDER BY name DESC; //ODER BY - Arrage the data 
 
//DESC- Arrange the data in descending order default value is acending
 
 
 SELECT * FROM student ORDER BY major,student_id DESC;
 
 SELECT * FROM student LIMIT 2;//LIMIT - it will show the value of n(here 2) number row
 
 SELECT name,major FROM student WHERE major='CSE';
 
 SELECT name,major FROM student WHERE major='CSE' or major='biology';
 
 SELECT name,major FROM student WHERE major<>'CSE';
 
 SELECT major FROM student WHERE name IN('Lokesh','Mike','Ken','admon');//where name is(some group of values);
 
 
 ****Example of database queries(company database)****


--creating employee table

CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT,
  branch_id INT
);

--creating branch table

CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  
  --mgr_id is initalized before refering as foreign key(only while creating table)
  
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

--alterting employee table to add brach_id as foreign key and on delete set null will set value null if it get deleted

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

--alterting employee table to add super_id as foreign key and on delete set null will set value null if it get deleted

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

--creating table client

CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

--creating table works_with

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id), --composite key 
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

--creating table brach_supplier

CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);


-- -----------------------------------------------------------------------------
--Inserting values 
-- Corporate
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);


-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

 ****More Basic Queries****
 
  --Find all employees
  
  SELECT * FROM employee;
  
  --Find all client
   
   SELECT * FROM client;
  
  --Find all employee ordered by salary
  SELECT * FROM employee ORDER BY salary ; --use DESC 	for descending order
  
  --Find all employee ordered by sex then name
  
  SELECT * FROM employee ORDER BY sex ,first_name,last_name;
  
  --Find the first 5 employees in the table
  
  SELECT * FROM  employee LIMIT 5;
  
  --Find the first and last names of all employees
  
  SELECT first_name,last_name FROM employee;
  
  INSERT INTO  employee VALUES(109,'Choel','Zebir','2001-11-19','M',20000,102,2); 
  
  SELECT * FROM employee ORDER BY first_name,last_name; /*firstly arrange first_name then last_name*/      

  --Find the forename and surenames names of all employee
  
  SELECT first_name AS forename,last_name AS surname FROM employee;
   
  --Find out all the different genders
  
  SELECT DISTINCT sex FROM employee;
  
  ****SQL Functions****
  
   --Find the numbers of employees
   
   SELECT COUNT(emp_id) FROM employee;
   SELECT COUNT(super_id) FROM employee;
   
   --Find the number of female employees born after 1970
   
   SELECT COUNT(emp_id) FROM employee WHERE SEX ='F' AND birth_day >='1971-01-01';

   --Find the average of all employee's salaries
   
   SELECT AVG(salary) FROM employee;
   
   SELECT AVG(salary) FROM employee WHERE sex='M';

--Sum of employee's salaries

SELECT SUM(salary) FROM employee ;

--Find out how many males and females are there

SELECT COUNT(sex),sex FROM employee GROUP BY sex;
 
--find the total sales of each salesman
SELECT SUM(total_sales),emp_id FROM works_with GROUP BY emp_id;

****Wildcards****

%=any # characters, _=one character //% means any number of character can be there before the speical character

--Find any client's who are an LLC     

SELECT * FROM client WHERE client_name LIKE '%LLC';

--Find any branch suppliers who are in the label business

SELECT * FROM branch_supplier WHERE supplier_name LIKE '%label%' ;

--Find any employee born in october 

SELECT * FROM employee WHERE birth_day LIKE '____-10%' ;

--Find any client who are schools
SELECT * FROM client WHERE client_name LIKE '%school%' ;
 
****UNION****
//same number of column is needed to do union

--Find a list of employee and branch names
SELECT first_name FROM employee
UNION 
SELECT branch_name FROM branch
UNION 
SELECT client_name 
FROM client;

--Find a list of all clients and branch supplier's name

SELECT client_name 
FROM client
UNION
SELECT supplier_name FROM branch_supplier
;

--Find a list of all money spent or earned by the company

SELECT salary 
FROM employee
UNION
SELECT total_sales FROM works_with;

***Joins****
 INSERT INTO branch (branch_id,branch_name)VALUES(4,'Buffalo');

--Find all branches and the names of their managers

SELECT employee.emp_id,employee.first_name,branch.branch_name
FROM employee 
JOIN branch 
ON employee.emp_id =branch.mgr_id;
  
**Left join** 
SELECT employee.emp_id,employee.first_name,branch.branch_name
FROM employee 
LEFT JOIN branch 
ON employee.emp_id =branch.mgr_id;
//Here left table employee (which is after FROM)

**Right join**
SELECT employee.emp_id,employee.first_name,branch.branch_name
FROM employee 
RIGHT JOIN branch 
ON employee.emp_id =branch.mgr_id;

****Nested Queries****

--Find names of all employee who have sold over 30,000 to a single client

SELECT employee.first_name,employee.last_name
FROM employee
WHERE employee.emp_id IN(

	SELECT works_with.emp_id 
	FROM works_with 
	WHERE works_with.total_sales>30000
  
 );
 
 --Find all clients who are handled by the branch that Michael Scott manages assume you know Michel's ID
 
 SELECT client.client_id, client.client_name 
 FROM client
 WHERE client.branch_id IN (
 	
 	SELECT branch.branch_id 
 	FROM branch
 	WHERE branch.mgr_id = 102
 );
 //if we use = in place of IN then we have to limit the output in inner queieres to 1

****On Delete****

**ON DELETE SET NULL**

//We have to mention 'ON DELETE SET NULL' while creating the table 

DELETE FROM employee
WHERE emp_id = 102;

SELECT * FROM branch;

**ON DELETE CASCADE**

//We have to mention 'ON DELETE CASCADING' while creating the table 

DELETE FROM branch
WHERE branch_id = 2;
 
SELECT * FROM branch_supplier;

****Triggers****

CREATE TABLE trigger_test(
	message VARCHAR(100)
	);

/*We have to write it into sql command line */

DELIMITER $$
CREATE 
	TRIGGER my_trigger BEFORE INSERT
	ON employee
	FOR EACH ROW BEGIN
		INSERT INTO trigger_test VALUES('added new employee');
	END$$
DELIMITER;


DELIMITER $$
CREATE 
	TRIGGER my_trigger BEFORE INSERT
	ON employee
	FOR EACH ROW BEGIN
		INSERT INTO trigger_test VALUES(NEW.first_name);
	END$$
DELIMITER;

//NEW is use to access the column that in the row that affect the triggers - syntax is NEW.colum_name

INSERT INTO employee(emp_id,first_name,last_name) VALUES(12,'Roman','Row');

SELECT * FROM trigger_test;

INSERT INTO employee(emp_id,first_name,last_name) VALUES(13,'Steve','Roger');


DELIMITER $$
CREATE 
	TRIGGER my_trigger2 BEFORE INSERT
	ON employee
	FOR EACH ROW BEGIN
IF NEW.sex = 'M' THEN
	INSERT INTO trigger_test VALUES('added male employee');
ELSEIF NEW.sex ='F' THEN
	INSERT INT trigger_test VALUES('added female');
ELSE 
	INSERT INTO trigger_test VALUES('added other employee');
END IF;
END$$
DELIMITER ;
    
    
INSERT INTO employee(emp_id,first_name,last_name) VALUES(14,'Bucky','Roger','1990-04-11','M');;
SELECT * FROM trigger_test;


****ER Diagrams intro****

Step 1: Mapping of regular entity types- For each regular entity type 
	create a relation(table)that includes all the simple attributes of 
	that entity
	
Step 2: Mapping of weak Entity types- For each weak entity type create a relation(table)
	that includes all simple attributes of the weak entity
	
Step 3: Mapping of Binary(means 2 parties are participating) 1:1 Relationship types- Includes one side of the realtionship as a
	foreign key in the other,Favor total participation.
Step 4: Mapping of Binary 1:N Realtioship types- Include the 1 side's primary key as a foreign key on the
		N side relation(table).
		
Step 5: Mapping of Binary M:N Relationship types- Create a new realtion(table) who's primary key is a combination of both entites' primary key's.
	Also include any relaionship attributes.The key will called composite key.
	 
**For weak entity: The primary key(supplier_name) of the new relation should
	be the partial key of the weak entity plus the primary key(branch_id) 
	of its owner
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	lab copy:::
	
	
	
	INSERT INTO employee1 VALUES(14,'Rohit',33,'BCA',10000);
INSERT INTO employee1 VALUES(15,'Lara',20,'IT',15000);
INSERT INTO employee1 VALUES(16,'Micky',46,'Btech',10400);
INSERT INTO employee1 VALUES(17,'Raj',50,'BCA',10000);
INSERT INTO employee1 VALUES(18,'Menon',32,'IT',50000);
INSERT INTO employee1 VALUES(19,'Juli',30,'MTECH',150000);
INSERT INTO employee1 VALUES(20,'Bakham',31,'BCA',4000000);
                             
                           
select department,salary from employee1 GROUP BY department HAVING min(salary);